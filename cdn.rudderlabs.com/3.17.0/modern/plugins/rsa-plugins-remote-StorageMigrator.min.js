import {
    l as r,
    h as a,
    f as e
} from "./rsa-plugins-common.min.js";
import {
    d as t
} from "./rsa-plugins-legacyEncryptionUtils.min.js";
const o = "StorageMigrator",
    l = () => ({
        name: o,
        initialize: r => {
            r.plugins.loadedPlugins.value = [...r.plugins.loadedPlugins.value, o]
        },
        storage: {
            migrate(o, l, i, n) {
                try {
                    const i = l.getItem(o);
                    if (r(i)) return null;
                    let n = i,
                        s = t(n);
                    for (s = a(s), n = JSON.parse(s); e(n) && (s = t(n), s = a(s), s !== n);) n = JSON.parse(s);
                    return n
                } catch (r) {
                    return null == i || i.onError(r, "StorageMigratorPlugin", (r => `Failed to retrieve or parse data for ${r} from storage.`)(o)), null
                }
            }
        }
    });
export {
    l as StorageMigrator, l as
    default
};
//# sourceMappingURL=rsa-plugins-remote-StorageMigrator.min.js.map